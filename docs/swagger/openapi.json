{
    "openapi": "3.0.0",
    "info": {
        "description": "API for managing community watch shifts, bookings, and reports",
        "title": "Community Watch Shift Scheduler API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "paths": {
        "/api/admin/users": {
            "get": {
                "description": "Get a list of all users in the system. Requires admin authentication.",
                "tags": [
                    "admin/users"
                ],
                "summary": "List all users (Admin)",
                "parameters": [
                    {
                        "description": "Search term to filter users by name or phone",
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/api.UserAPIResponse"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user in the system. Requires admin authentication.",
                "tags": [
                    "admin/users"
                ],
                "summary": "Create a new user (Admin)",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.createUserRequest"
                            }
                        }
                    },
                    "description": "User information",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.UserAPIResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/admin/users/{id}": {
            "get": {
                "description": "Get a specific user's details by their ID. Requires admin authentication.",
                "tags": [
                    "admin/users"
                ],
                "summary": "Get a user by ID (Admin)",
                "parameters": [
                    {
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.UserAPIResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update a user's details by their ID. Requires admin authentication.",
                "tags": [
                    "admin/users"
                ],
                "summary": "Update a user (Admin)",
                "parameters": [
                    {
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.updateUserRequest"
                            }
                        }
                    },
                    "description": "User information",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Updated user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.UserAPIResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user by their ID. Requires admin authentication.",
                "tags": [
                    "admin/users"
                ],
                "summary": "Delete a user (Admin)",
                "parameters": [
                    {
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user with phone number or starts login flow for existing user",
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user or request OTP for existing user",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.RegisterRequest"
                            }
                        }
                    },
                    "description": "User registration details",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.RegisterResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid phone number or request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/verify": {
            "post": {
                "description": "Verifies the one-time password (OTP) and returns a JWT token on success",
                "tags": [
                    "auth"
                ],
                "summary": "Verify OTP and get authentication token",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.VerifyRequest"
                            }
                        }
                    },
                    "description": "Verification details",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Verified successfully, returns JWT token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.VerifyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid OTP or verification failed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Books a shift slot for a user",
                "tags": [
                    "bookings"
                ],
                "summary": "Create a new booking",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.CreateBookingRequest"
                            }
                        }
                    },
                    "description": "Booking details",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.BookingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format or data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Slot already booked (conflict)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings/{id}/attendance": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a booking to record whether the volunteer attended",
                "tags": [
                    "bookings"
                ],
                "summary": "Mark attendance for a booking",
                "parameters": [
                    {
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.MarkAttendanceRequest"
                            }
                        }
                    },
                    "description": "Attendance status",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Attendance marked successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.BookingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - not authorized to mark this booking",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings/{id}/report": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submits an incident report for a specific booking",
                "tags": [
                    "reports"
                ],
                "summary": "Create a report for a booking",
                "parameters": [
                    {
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/api.CreateReportRequest"
                            }
                        }
                    },
                    "description": "Report details",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Report created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ReportResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format or severity out of range",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - not authorized to report on this booking",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "description": "Returns a list of all defined schedules",
                "tags": [
                    "schedules"
                ],
                "summary": "List all schedules",
                "responses": {
                    "200": {
                        "description": "List of schedules",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/api.ScheduleResponse"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/shifts/available": {
            "get": {
                "description": "Returns a list of available shift slots based on schedule definitions",
                "tags": [
                    "shifts"
                ],
                "summary": "List available shift slots",
                "parameters": [
                    {
                        "description": "Start date for shift window (RFC3339 format)",
                        "name": "from",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for shift window (RFC3339 format)",
                        "name": "to",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Maximum number of shifts to return",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of available shift slots",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/service.AvailableShiftSlot"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/api.ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "http://localhost:8080"
        }
    ],
    "components": {
        "schemas": {
            "api.BookingResponse": {
                "type": "object",
                "properties": {
                    "attended": {
                        "type": "boolean"
                    },
                    "booking_id": {
                        "type": "integer"
                    },
                    "buddy_name": {
                        "type": "string"
                    },
                    "buddy_user_id": {
                        "type": "integer"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "schedule_id": {
                        "type": "integer"
                    },
                    "shift_end": {
                        "type": "string"
                    },
                    "shift_start": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "integer"
                    }
                }
            },
            "api.CreateBookingRequest": {
                "type": "object",
                "properties": {
                    "buddy_name": {
                        "type": "string"
                    },
                    "buddy_phone": {
                        "type": "string"
                    },
                    "schedule_id": {
                        "type": "integer"
                    },
                    "start_time": {
                        "description": "Expected in RFC3339 format e.g. \"2025-05-10T18:00:00Z\"",
                        "type": "string"
                    }
                }
            },
            "api.CreateReportRequest": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "severity": {
                        "description": "0, 1, or 2",
                        "type": "integer"
                    }
                }
            },
            "api.ErrorResponse": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    }
                }
            },
            "api.MarkAttendanceRequest": {
                "type": "object",
                "properties": {
                    "attended": {
                        "type": "boolean"
                    }
                }
            },
            "api.RegisterRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    }
                }
            },
            "api.RegisterResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                }
            },
            "api.ReportResponse": {
                "type": "object",
                "properties": {
                    "booking_id": {
                        "type": "integer"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "report_id": {
                        "type": "integer"
                    },
                    "severity": {
                        "type": "integer"
                    }
                }
            },
            "api.ScheduleResponse": {
                "type": "object",
                "properties": {
                    "cron_expr": {
                        "type": "string"
                    },
                    "duration_minutes": {
                        "type": "integer"
                    },
                    "end_date": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "schedule_id": {
                        "type": "integer"
                    },
                    "start_date": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    }
                }
            },
            "api.UserAPIResponse": {
                "type": "object",
                "properties": {
                    "created_at": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "role": {
                        "description": "Added role",
                        "type": "string"
                    }
                }
            },
            "api.VerifyRequest": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    }
                }
            },
            "api.VerifyResponse": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string"
                    }
                }
            },
            "api.createUserRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "role": {
                        "description": "Optional role",
                        "type": "string"
                    }
                }
            },
            "api.updateUserRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "role": {
                        "description": "Optional role, assuming we'll add update role logic later",
                        "type": "string"
                    }
                }
            },
            "service.AvailableShiftSlot": {
                "type": "object",
                "properties": {
                    "end_time": {
                        "type": "string"
                    },
                    "is_booked": {
                        "description": "Should always be false when returned by GetUpcomingAvailableSlots",
                        "type": "boolean"
                    },
                    "schedule_id": {
                        "type": "integer"
                    },
                    "schedule_name": {
                        "type": "string"
                    },
                    "start_time": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    }
                }
            }
        }
    }
}