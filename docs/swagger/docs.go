// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/register": {
            "post": {
                "description": "Registers a new user with phone number or starts login flow for existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user or request OTP for existing user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "$ref": "#/definitions/api.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid phone number or request format",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verify": {
            "post": {
                "description": "Verifies the one-time password (OTP) and returns a JWT token on success",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify OTP and get authentication token",
                "parameters": [
                    {
                        "description": "Verification details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VerifyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verified successfully, returns JWT token",
                        "schema": {
                            "$ref": "#/definitions/api.VerifyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid OTP or verification failed",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/bookings": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Books a shift slot for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookings"
                ],
                "summary": "Create a new booking",
                "parameters": [
                    {
                        "description": "Booking details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateBookingRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "schema": {
                            "$ref": "#/definitions/api.BookingResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or data",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Slot already booked (conflict)",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/attendance": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a booking to record whether the volunteer attended",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookings"
                ],
                "summary": "Mark attendance for a booking",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Attendance status",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MarkAttendanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attendance marked successfully",
                        "schema": {
                            "$ref": "#/definitions/api.BookingResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not authorized to mark this booking",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/report": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submits an incident report for a specific booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Create a report for a booking",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Report details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreateReportRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Report created successfully",
                        "schema": {
                            "$ref": "#/definitions/api.ReportResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or severity out of range",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - authentication required",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - not authorized to report on this booking",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Booking not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "description": "Returns a list of all defined schedules",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedules"
                ],
                "summary": "List all schedules",
                "responses": {
                    "200": {
                        "description": "List of schedules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.ScheduleResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/shifts/available": {
            "get": {
                "description": "Returns a list of available shift slots based on schedule definitions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shifts"
                ],
                "summary": "List available shift slots",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date for shift window (RFC3339 format)",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date for shift window (RFC3339 format)",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of shifts to return",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of available shift slots",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/service.AvailableShiftSlot"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.BookingResponse": {
            "type": "object",
            "properties": {
                "attended": {
                    "type": "boolean"
                },
                "booking_id": {
                    "type": "integer"
                },
                "buddy_name": {
                    "type": "string"
                },
                "buddy_user_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "shift_end": {
                    "type": "string"
                },
                "shift_start": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "api.CreateBookingRequest": {
            "type": "object",
            "properties": {
                "buddy_name": {
                    "type": "string"
                },
                "buddy_phone": {
                    "type": "string"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "start_time": {
                    "description": "Expected in RFC3339 format e.g. \"2025-05-10T18:00:00Z\"",
                    "type": "string"
                }
            }
        },
        "api.CreateReportRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "severity": {
                    "description": "0, 1, or 2",
                    "type": "integer"
                }
            }
        },
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "api.MarkAttendanceRequest": {
            "type": "object",
            "properties": {
                "attended": {
                    "type": "boolean"
                }
            }
        },
        "api.RegisterRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "api.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "api.ReportResponse": {
            "type": "object",
            "properties": {
                "booking_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "report_id": {
                    "type": "integer"
                },
                "severity": {
                    "type": "integer"
                }
            }
        },
        "api.ScheduleResponse": {
            "type": "object",
            "properties": {
                "cron_expr": {
                    "type": "string"
                },
                "duration_minutes": {
                    "type": "integer"
                },
                "end_date": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "api.VerifyRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "api.VerifyResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "service.AvailableShiftSlot": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "is_booked": {
                    "description": "Should always be false when returned by GetUpcomingAvailableSlots",
                    "type": "boolean"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "schedule_name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Community Watch Shift Scheduler API",
	Description:      "\"Enter JWT Bearer token\"",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
