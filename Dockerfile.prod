# Build frontend
FROM node:20-alpine AS frontend-builder

# Install pnpm
RUN corepack enable pnpm

WORKDIR /app/frontend

# Copy only package files first for better caching
COPY app/package.json app/pnpm-lock.yaml* ./
RUN pnpm install --frozen-lockfile --prefer-offline

# Then copy source and build
COPY app/ ./
RUN pnpm run build

# Build backend
FROM golang:1.24-alpine AS backend-builder

# Install build dependencies
RUN apk add --no-cache gcc musl-dev sqlite-dev

# Set Go environment
ENV GOPROXY=https://proxy.golang.org,direct
ENV GOSUMDB=sum.golang.org
ENV CGO_ENABLED=1

WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Copy only necessary source files (exclude test files, docs, etc)
COPY cmd/ ./cmd/
COPY internal/ ./internal/
COPY *.go ./

# Build without -a flag for faster compilation
RUN go build -ldflags="-w -s" -o night-owls-server ./cmd/server

# Production image - use specific alpine version for consistency
FROM alpine:3.20

# Install runtime dependencies
RUN apk --no-cache add ca-certificates sqlite tzdata && \
    addgroup -S appgroup && \
    adduser -S appuser -G appgroup && \
    mkdir -p /app/static /app/data /app/migrations && \
    chown -R appuser:appgroup /app

WORKDIR /app

# Copy artifacts
COPY --chown=appuser:appgroup internal/db/migrations/ ./migrations/
COPY --from=backend-builder --chown=appuser:appgroup /app/night-owls-server .
COPY --from=frontend-builder --chown=appuser:appgroup /app/frontend/build ./static

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5888

# Set environment
ENV TZ=UTC \
    SERVER_PORT=5888 \
    STATIC_DIR=./static \
    DATABASE_PATH=./data/production.db

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:5888/health || exit 1

CMD ["./night-owls-server"] 