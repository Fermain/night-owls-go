name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set lowercase image name
      id: image_name
      run: echo "IMAGE_NAME_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build frontend locally (same as manual deployment approach)
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Enable pnpm
      run: corepack enable pnpm

    - name: Build frontend locally
      working-directory: ./app
      run: |
        echo "📦 Installing dependencies..."
        pnpm install --frozen-lockfile
        echo "🔨 Building frontend..."
        pnpm run build
        echo "✅ Frontend build complete"

    - name: Verify frontend build
      run: |
        if [ ! -d "app/build" ]; then
          echo "❌ Frontend build failed - build directory not found"
          exit 1
        fi
        if [ ! -f "app/build/index.html" ]; then
          echo "❌ index.html missing - this will cause 404 errors"
          exit 1
        fi
        echo "✅ Frontend build verification passed"
        echo "📊 Frontend build contains $(find app/build -type f | wc -l) files"

    # Copy frontend build to server (using ssh-action approach)
    - name: Prepare server for frontend files
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-app
          echo "📦 Preparing for frontend files..."
          mkdir -p frontend-build
          rm -rf frontend-build/*

    - name: Upload frontend files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "app/build/*"
        target: "~/night-owls-app/frontend-build/"
        strip_components: 2

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-app
          
          echo "🛑 Stopping containers..."
          docker compose down || docker-compose down || true
          
          echo "🗑️ Removing old containers and images..."
          docker container prune -f
          docker image prune -f --filter "label=org.opencontainers.image.source=https://github.com/${{ github.repository }}"
          
          echo "🔐 Logging in to registry..."
          echo ${{ secrets.CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "📦 Pulling latest image..."
          docker pull ghcr.io/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}:latest
          
          echo "🚀 Starting application..."
          docker compose up -d --force-recreate || docker-compose up -d --force-recreate
          
          echo "⏳ Waiting for application..."
          sleep 15
          
          echo "🏥 Health check..."
          curl -f http://localhost:5888/health && echo "✅ Backend healthy!" || { echo "❌ Backend failed"; exit 1; }
          
          echo "🌐 Frontend check..."
          curl -f http://localhost/ && echo "✅ Frontend accessible!" || { echo "❌ Frontend failed"; exit 1; }
          
          echo "🔐 SSL check..."
          curl -f https://mm.nightowls.app/health && echo "✅ SSL deployed!" || echo "⚠️ SSL pending (may take a few minutes)"

    - name: Final verification
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-app
          
          echo "🔍 Verifying frontend-build directory..."
          if [ ! -d "frontend-build" ]; then
            echo "❌ frontend-build directory missing"
            exit 1
          fi
          
          if [ ! -f "frontend-build/index.html" ]; then
            echo "❌ index.html missing in frontend-build"
            exit 1
          fi
          
          echo "📊 Frontend files verification:"
          ls -la frontend-build/ | head -10
          
          echo "🔄 Restarting containers to pick up new frontend files..."
          docker compose restart caddy
          
          echo "⏳ Final health check..."
          sleep 10
          curl -f https://mm.nightowls.app/ && echo "✅ Full deployment successful!" || { 
            echo "❌ Final check failed, checking logs..."
            docker compose logs caddy --tail=20
            exit 1
          }
