name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_demo:
        description: 'Deploy to demo environment'
        required: false
        default: false
        type: boolean
      reset_demo_data:
        description: 'Reset demo data with fresh seed'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.24.2'
  NODE_VERSION: '20'

jobs:
  ci:
    name: Run CI
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  build-and-push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: ci
    environment: Production
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set lowercase image name
      id: image_name
      run: echo "IMAGE_NAME_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}
        tags: |
          type=ref,event=branch
          type=sha
          latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: ci
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Enable pnpm
      run: corepack enable pnpm

    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          app/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('app/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Build frontend
      working-directory: ./app
      run: |
        echo "📦 Installing dependencies..."
        pnpm install --frozen-lockfile
        echo "🔨 Building frontend..."
        pnpm run build
        echo "✅ Frontend build complete"

    - name: Verify frontend build
      run: |
        if [ ! -d "app/build" ]; then
          echo "❌ Frontend build failed - build directory not found"
          exit 1
        fi
        if [ ! -f "app/build/index.html" ]; then
          echo "❌ index.html missing - this will cause 404 errors"
          exit 1
        fi
        echo "✅ Frontend build verification passed"
        echo "📊 Frontend build contains $(find app/build -type f | wc -l) files"

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: app/build/
        retention-days: 7

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, build-frontend]
    environment: Production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-build/

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-go
          
          echo "🛑 Stopping containers..."
          docker compose down || docker-compose down || true
          
          echo "🗑️ Cleaning up..."
          docker container prune -f
          docker image prune -f --filter "label=org.opencontainers.image.source=https://github.com/${{ github.repository }}"
          
          echo "🔐 Logging in to registry..."
          echo ${{ secrets.CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "📦 Pulling latest image..."
          docker pull ${{ needs.build-and-push.outputs.image }}
          
          echo "🚀 Starting application..."
          docker compose up -d --force-recreate
          
          echo "⏳ Waiting for application..."
          sleep 15

    - name: Upload frontend files to production
      uses: appleboy/scp-action@v0.1.7
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "frontend-build/*"
        target: "~/night-owls-go/frontend-build/"
        strip_components: 1

    - name: Final production health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-go
          
          echo "🔄 Restarting Caddy to pick up new frontend files..."
          docker compose restart caddy
          
          echo "⏳ Final health check..."
          sleep 10
          
          # Backend health check
          if curl -f http://localhost:5888/health > /dev/null 2>&1; then
            echo "✅ Backend healthy!"
          else
            echo "❌ Backend failed"
            docker compose logs night-owls --tail=20
            exit 1
          fi
          
          # Frontend check
          if curl -f http://localhost/ > /dev/null 2>&1; then
            echo "✅ Frontend accessible!"
          else
            echo "❌ Frontend failed"
            docker compose logs caddy --tail=20
            exit 1
          fi
          
          # SSL check (allow to fail since it might take time)
          if curl -f https://mm.nightowls.app/health > /dev/null 2>&1; then
            echo "✅ SSL deployed!"
          else
            echo "⚠️ SSL pending (may take a few minutes)"
          fi
          
          echo "🎉 Production deployment completed successfully!"

  deploy-demo:
    name: Deploy to Demo Environment  
    runs-on: ubuntu-latest
    needs: [build-and-push, build-frontend]
    environment: Demo
    if: inputs.deploy_demo == true || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-build/

    - name: Deploy demo instance
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-go
          
          echo "🎭 Deploying demo instance..."
          
          # Stop demo containers if running
          docker compose -f docker-compose.demo.yml down 2>/dev/null || true
          
          # Create demo-specific compose if it doesn't exist
          if [ ! -f docker-compose.demo.yml ]; then
            echo "📝 Creating demo compose configuration..."
            cat > docker-compose.demo.yml << 'EOF'
          services:
            night-owls-demo:
              image: ${{ needs.build-and-push.outputs.image }}
              container_name: night-owls-demo
              restart: unless-stopped
              ports:
                - "5889:5888"
              environment:
                - SERVER_PORT=5888
                - DATABASE_PATH=./data/demo.db
                - DEV_MODE=true
                - JWT_SECRET=${JWT_SECRET:-demo-secret-key}
                - JWT_EXPIRATION_HOURS=168  # 1 week for demo
                - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY:-}
                - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY:-}
                - VAPID_SUBJECT=${VAPID_SUBJECT:-}
                - OTP_LOG_PATH=./data/logs/demo_sms_outbox.log
                # Demo doesn't need real Twilio
                - TWILIO_ACCOUNT_SID=
                - TWILIO_AUTH_TOKEN=
                - TWILIO_VERIFY_SID=
                - TWILIO_FROM_NUMBER=
              volumes:
                - night_owls_demo_data:/app/data
                - ./frontend-build:/app/frontend:ro
              networks:
                - night_owls_demo_network

          volumes:
            night_owls_demo_data:

          networks:
            night_owls_demo_network:
              driver: bridge
          EOF
          fi
          
          echo "🔐 Logging in to registry..."
          echo ${{ secrets.CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "📦 Pulling demo image..."
          docker pull ${{ needs.build-and-push.outputs.image }}
          
          echo "🚀 Starting demo instance..."
          docker compose -f docker-compose.demo.yml up -d
          
          echo "⏳ Waiting for demo startup..."
          sleep 10

    - name: Seed demo data
      if: inputs.reset_demo_data == true || github.event_name == 'workflow_dispatch'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-go
          
          echo "🌱 Seeding demo database with fresh data..."
          docker exec night-owls-demo ./seed --db ./data/demo.db --reset --users 50 --future-bookings --verbose
          
          echo "✅ Demo data seeded successfully"

    - name: Upload frontend to demo
      uses: appleboy/scp-action@v0.1.7
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "frontend-build/*"
        target: "~/night-owls-go/demo-frontend/"
        strip_components: 1

    - name: Demo health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "🔍 Demo health check..."
          
          # Check demo backend
          if curl -f http://localhost:5889/health > /dev/null 2>&1; then
            echo "✅ Demo backend healthy on port 5889!"
          else
            echo "❌ Demo backend failed"
            docker compose -f docker-compose.demo.yml logs night-owls-demo --tail=20
            exit 1
          fi
          
          echo "🎉 Demo deployment completed successfully!"
          echo "🌐 Demo accessible at: demo.nightowls.app (configure DNS and reverse proxy)"
