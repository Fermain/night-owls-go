name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.24.2'
  NODE_VERSION: '20'

jobs:
  ci:
    name: Run CI
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: ci
    environment: Production
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set lowercase image name
      id: image_name
      run: echo "IMAGE_NAME_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: ci
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Enable pnpm
      run: corepack enable pnpm

    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          app/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('app/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Build frontend
      working-directory: ./app
      run: |
        echo "📦 Installing dependencies..."
        pnpm install --frozen-lockfile
        echo "🔨 Building frontend..."
        pnpm run build
        echo "✅ Frontend build complete"

    - name: Verify frontend build
      run: |
        if [ ! -d "app/build" ]; then
          echo "❌ Frontend build failed - build directory not found"
          exit 1
        fi
        if [ ! -f "app/build/index.html" ]; then
          echo "❌ index.html missing - this will cause 404 errors"
          exit 1
        fi
        echo "✅ Frontend build verification passed"
        echo "📊 Frontend build contains $(find app/build -type f | wc -l) files"

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: app/build/
        retention-days: 1

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, frontend]
    environment: Production
    steps:
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend-build/

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-go
          
          echo "🛑 Stopping containers..."
          docker compose down || docker-compose down || true
          
          echo "🗑️ Cleaning up..."
          docker container prune -f
          docker image prune -f --filter "label=org.opencontainers.image.source=https://github.com/${{ github.repository }}"
          
          echo "🔐 Logging in to registry..."
          echo ${{ secrets.CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "📦 Pulling latest image..."
          docker pull ${{ needs.build.outputs.image }}
          
          echo "🚀 Starting application..."
          docker compose up -d --force-recreate
          
          echo "⏳ Waiting for application..."
          sleep 15

    - name: Upload frontend files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "frontend-build/*"
        target: "~/night-owls-go/frontend-build/"
        strip_components: 1

    - name: Final deployment steps
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-go
          
          echo "🔄 Restarting Caddy to pick up new frontend files..."
          docker compose restart caddy
          
          echo "⏳ Final health check..."
          sleep 10
          
          # Backend health check
          if curl -f http://localhost:5888/health > /dev/null 2>&1; then
            echo "✅ Backend healthy!"
          else
            echo "❌ Backend failed"
            docker compose logs night-owls --tail=20
            exit 1
          fi
          
          # Frontend check
          if curl -f http://localhost/ > /dev/null 2>&1; then
            echo "✅ Frontend accessible!"
          else
            echo "❌ Frontend failed"
            docker compose logs caddy --tail=20
            exit 1
          fi
          
          # SSL check (allow to fail since it might take time)
          if curl -f https://mm.nightowls.app/health > /dev/null 2>&1; then
            echo "✅ SSL deployed!"
          else
            echo "⚠️ SSL pending (may take a few minutes)"
          fi
          
          echo "🎉 Deployment completed successfully!"
