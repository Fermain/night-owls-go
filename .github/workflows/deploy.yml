name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Production
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set lowercase image name
      id: image_name
      run: echo "IMAGE_NAME_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: mm.nightowls.app
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/night-owls-go
          
          echo "🛑 Stopping containers..."
          docker compose down || docker-compose down || true
          
          echo "🗑️ Removing old containers and images..."
          docker container prune -f
          docker image prune -f --filter "label=org.opencontainers.image.source=https://github.com/${{ github.repository }}"
          
          echo "🔐 Logging in to registry..."
          echo ${{ secrets.CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "📦 Pulling latest image..."
          docker pull ghcr.io/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}:latest
          
          echo "🔍 Debug: Checking what's in the Docker image..."
          docker run --rm ghcr.io/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}:latest ls -la /app/
          docker run --rm ghcr.io/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}:latest ls -la /app/static/ || echo "No /app/static directory"
          docker run --rm ghcr.io/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}:latest find /app/static -name "*.html" || echo "No HTML files found"
          
          echo "🎨 Extracting SvelteKit build from image..."
          # TODO: Replace this extraction step with one of:
          # 1. Separate frontend-only image that Caddy can use directly
          # 2. Build frontend in CI and save as artifacts
          # 3. Build frontend directly on host
          docker create --name temp-extract ghcr.io/${{ steps.image_name.outputs.IMAGE_NAME_LOWER }}:latest
          
          # Clean up any existing build directory
          rm -rf app/build
          mkdir -p app/build
          
          # Extract the static files
          docker cp temp-extract:/app/static/. ./app/build/ || { 
            echo "❌ Failed to extract static files"; 
            docker logs temp-extract || true;
            docker rm temp-extract; 
            exit 1; 
          }
          docker rm temp-extract
          
          echo "📁 Debug: Checking extracted files structure..."
          ls -la app/ || echo "No app directory"
          ls -la app/build/ || echo "No app/build directory"
          if [ -d "app/build" ]; then
            echo "📄 Files in app/build:"
            find app/build -type f | head -10
            echo "🌐 Looking for index.html:"
            find app/build -name "index.html" || echo "❌ No index.html found!"
            echo "📱 Looking for _app directory:"
            ls -la app/build/_app/ || echo "❌ No _app directory found!"
          fi
          
          echo "🚀 Starting application..."
          docker compose up -d --force-recreate || docker-compose up -d --force-recreate
          
          echo "⏳ Waiting for application..."
          sleep 15
          
          echo "🏥 Health check..."
          curl -f http://localhost/health && echo "✅ App healthy!" || { echo "❌ App failed"; exit 1; }
          
          echo "🌐 SSL check..."
          curl -f https://mm.nightowls.app/health && echo "✅ SSL deployed!" || echo "⚠️ SSL pending (may take a few minutes)"
