name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.24.2'
  NODE_VERSION: '20'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    outputs:
      go-cache-key: ${{ steps.go-cache.outputs.cache-hit }}
      node-cache-key: ${{ steps.node-cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Go Cache
        id: go-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable pnpm
        run: corepack enable pnpm

      - name: Node Cache
        id: node-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            app/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('app/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Go - Download dependencies
        run: go mod download

      - name: Go - Run tests with coverage
        env:
          DATABASE_PATH: ./test.db
          JWT_SECRET: test-secret
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Go - Security scan
        uses: securego/gosec@master
        with:
          args: ./...

      - name: Go - Build
        run: go build -ldflags="-s -w" -o night-owls-server ./cmd/server

      - name: Frontend - Install dependencies
        working-directory: ./app
        run: pnpm install --frozen-lockfile

      - name: Frontend - Lint
        working-directory: ./app
        run: pnpm run lint

      - name: Frontend - Type check
        working-directory: ./app
        run: pnpm run check

      - name: Frontend - Build
        working-directory: ./app
        run: pnpm run build

      - name: Frontend - Test
        working-directory: ./app
        run: pnpm run test:unit

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: night-owls-go:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64 