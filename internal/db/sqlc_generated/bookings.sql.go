// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bookings.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (
    user_id,
    schedule_id,
    shift_start,
    shift_end,
    buddy_user_id,
    buddy_name
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING booking_id, user_id, schedule_id, shift_start, shift_end, buddy_user_id, buddy_name, attended, created_at
`

type CreateBookingParams struct {
	UserID      int64          `json:"user_id"`
	ScheduleID  int64          `json:"schedule_id"`
	ShiftStart  time.Time      `json:"shift_start"`
	ShiftEnd    time.Time      `json:"shift_end"`
	BuddyUserID sql.NullInt64  `json:"buddy_user_id"`
	BuddyName   sql.NullString `json:"buddy_name"`
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.UserID,
		arg.ScheduleID,
		arg.ShiftStart,
		arg.ShiftEnd,
		arg.BuddyUserID,
		arg.BuddyName,
	)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.UserID,
		&i.ScheduleID,
		&i.ShiftStart,
		&i.ShiftEnd,
		&i.BuddyUserID,
		&i.BuddyName,
		&i.Attended,
		&i.CreatedAt,
	)
	return i, err
}

const getBookingByID = `-- name: GetBookingByID :one
SELECT booking_id, user_id, schedule_id, shift_start, shift_end, buddy_user_id, buddy_name, attended, created_at FROM bookings
WHERE booking_id = ?
`

func (q *Queries) GetBookingByID(ctx context.Context, bookingID int64) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBookingByID, bookingID)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.UserID,
		&i.ScheduleID,
		&i.ShiftStart,
		&i.ShiftEnd,
		&i.BuddyUserID,
		&i.BuddyName,
		&i.Attended,
		&i.CreatedAt,
	)
	return i, err
}

const getBookingByScheduleAndStartTime = `-- name: GetBookingByScheduleAndStartTime :one
SELECT booking_id, user_id, schedule_id, shift_start, shift_end, buddy_user_id, buddy_name, attended, created_at FROM bookings
WHERE schedule_id = ? AND shift_start = ?
`

type GetBookingByScheduleAndStartTimeParams struct {
	ScheduleID int64     `json:"schedule_id"`
	ShiftStart time.Time `json:"shift_start"`
}

func (q *Queries) GetBookingByScheduleAndStartTime(ctx context.Context, arg GetBookingByScheduleAndStartTimeParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, getBookingByScheduleAndStartTime, arg.ScheduleID, arg.ShiftStart)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.UserID,
		&i.ScheduleID,
		&i.ShiftStart,
		&i.ShiftEnd,
		&i.BuddyUserID,
		&i.BuddyName,
		&i.Attended,
		&i.CreatedAt,
	)
	return i, err
}

const listBookingsByUserID = `-- name: ListBookingsByUserID :many
SELECT booking_id, user_id, schedule_id, shift_start, shift_end, buddy_user_id, buddy_name, attended, created_at FROM bookings
WHERE user_id = ?
ORDER BY shift_start DESC
`

func (q *Queries) ListBookingsByUserID(ctx context.Context, userID int64) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, listBookingsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Booking{}
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.BookingID,
			&i.UserID,
			&i.ScheduleID,
			&i.ShiftStart,
			&i.ShiftEnd,
			&i.BuddyUserID,
			&i.BuddyName,
			&i.Attended,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingAttendance = `-- name: UpdateBookingAttendance :one
UPDATE bookings
SET attended = ?
WHERE booking_id = ?
RETURNING booking_id, user_id, schedule_id, shift_start, shift_end, buddy_user_id, buddy_name, attended, created_at
`

type UpdateBookingAttendanceParams struct {
	Attended  bool  `json:"attended"`
	BookingID int64 `json:"booking_id"`
}

func (q *Queries) UpdateBookingAttendance(ctx context.Context, arg UpdateBookingAttendanceParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, updateBookingAttendance, arg.Attended, arg.BookingID)
	var i Booking
	err := row.Scan(
		&i.BookingID,
		&i.UserID,
		&i.ScheduleID,
		&i.ShiftStart,
		&i.ShiftEnd,
		&i.BuddyUserID,
		&i.BuddyName,
		&i.Attended,
		&i.CreatedAt,
	)
	return i, err
}
