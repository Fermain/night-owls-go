// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: otp_attempts.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const cleanupExpiredLocks = `-- name: CleanupExpiredLocks :exec
UPDATE otp_rate_limits 
SET failed_attempts = 0, locked_until = NULL, updated_at = CURRENT_TIMESTAMP
WHERE locked_until IS NOT NULL AND locked_until <= CURRENT_TIMESTAMP
`

func (q *Queries) CleanupExpiredLocks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupExpiredLocks)
	return err
}

const cleanupOldOTPAttempts = `-- name: CleanupOldOTPAttempts :exec
DELETE FROM otp_attempts 
WHERE created_at < ?
`

func (q *Queries) CleanupOldOTPAttempts(ctx context.Context, createdAt time.Time) error {
	_, err := q.db.ExecContext(ctx, cleanupOldOTPAttempts, createdAt)
	return err
}

const createOTPAttempt = `-- name: CreateOTPAttempt :one

INSERT INTO otp_attempts (phone, attempted_at, success, client_ip, user_agent)
VALUES (?, ?, ?, ?, ?)
RETURNING attempt_id, phone, attempted_at, success, client_ip, user_agent, created_at
`

type CreateOTPAttemptParams struct {
	Phone       string         `json:"phone"`
	AttemptedAt time.Time      `json:"attempted_at"`
	Success     int64          `json:"success"`
	ClientIp    sql.NullString `json:"client_ip"`
	UserAgent   sql.NullString `json:"user_agent"`
}

// OTP Attempts Queries
func (q *Queries) CreateOTPAttempt(ctx context.Context, arg CreateOTPAttemptParams) (OtpAttempt, error) {
	row := q.db.QueryRowContext(ctx, createOTPAttempt,
		arg.Phone,
		arg.AttemptedAt,
		arg.Success,
		arg.ClientIp,
		arg.UserAgent,
	)
	var i OtpAttempt
	err := row.Scan(
		&i.AttemptID,
		&i.Phone,
		&i.AttemptedAt,
		&i.Success,
		&i.ClientIp,
		&i.UserAgent,
		&i.CreatedAt,
	)
	return i, err
}

const createOTPRateLimit = `-- name: CreateOTPRateLimit :one
INSERT INTO otp_rate_limits (phone, failed_attempts, first_attempt_at, last_attempt_at)
VALUES (?, ?, ?, ?)
RETURNING phone, failed_attempts, locked_until, first_attempt_at, last_attempt_at, created_at, updated_at
`

type CreateOTPRateLimitParams struct {
	Phone          string    `json:"phone"`
	FailedAttempts int64     `json:"failed_attempts"`
	FirstAttemptAt time.Time `json:"first_attempt_at"`
	LastAttemptAt  time.Time `json:"last_attempt_at"`
}

func (q *Queries) CreateOTPRateLimit(ctx context.Context, arg CreateOTPRateLimitParams) (OtpRateLimit, error) {
	row := q.db.QueryRowContext(ctx, createOTPRateLimit,
		arg.Phone,
		arg.FailedAttempts,
		arg.FirstAttemptAt,
		arg.LastAttemptAt,
	)
	var i OtpRateLimit
	err := row.Scan(
		&i.Phone,
		&i.FailedAttempts,
		&i.LockedUntil,
		&i.FirstAttemptAt,
		&i.LastAttemptAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOTPRateLimit = `-- name: DeleteOTPRateLimit :exec
DELETE FROM otp_rate_limits 
WHERE phone = ?
`

func (q *Queries) DeleteOTPRateLimit(ctx context.Context, phone string) error {
	_, err := q.db.ExecContext(ctx, deleteOTPRateLimit, phone)
	return err
}

const getFailedOTPAttemptsInWindow = `-- name: GetFailedOTPAttemptsInWindow :one
SELECT COUNT(*) as failed_count
FROM otp_attempts 
WHERE phone = ? AND attempted_at >= ? AND success = 0
`

type GetFailedOTPAttemptsInWindowParams struct {
	Phone       string    `json:"phone"`
	AttemptedAt time.Time `json:"attempted_at"`
}

func (q *Queries) GetFailedOTPAttemptsInWindow(ctx context.Context, arg GetFailedOTPAttemptsInWindowParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFailedOTPAttemptsInWindow, arg.Phone, arg.AttemptedAt)
	var failed_count int64
	err := row.Scan(&failed_count)
	return failed_count, err
}

const getLockedPhones = `-- name: GetLockedPhones :many
SELECT phone, locked_until, failed_attempts 
FROM otp_rate_limits 
WHERE locked_until IS NOT NULL AND locked_until > CURRENT_TIMESTAMP
`

type GetLockedPhonesRow struct {
	Phone          string       `json:"phone"`
	LockedUntil    sql.NullTime `json:"locked_until"`
	FailedAttempts int64        `json:"failed_attempts"`
}

func (q *Queries) GetLockedPhones(ctx context.Context) ([]GetLockedPhonesRow, error) {
	rows, err := q.db.QueryContext(ctx, getLockedPhones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLockedPhonesRow{}
	for rows.Next() {
		var i GetLockedPhonesRow
		if err := rows.Scan(&i.Phone, &i.LockedUntil, &i.FailedAttempts); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOTPAttemptsInWindow = `-- name: GetOTPAttemptsInWindow :many
SELECT attempt_id, phone, attempted_at, success, client_ip, user_agent, created_at FROM otp_attempts 
WHERE phone = ? AND attempted_at >= ?
ORDER BY attempted_at DESC
`

type GetOTPAttemptsInWindowParams struct {
	Phone       string    `json:"phone"`
	AttemptedAt time.Time `json:"attempted_at"`
}

func (q *Queries) GetOTPAttemptsInWindow(ctx context.Context, arg GetOTPAttemptsInWindowParams) ([]OtpAttempt, error) {
	rows, err := q.db.QueryContext(ctx, getOTPAttemptsInWindow, arg.Phone, arg.AttemptedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OtpAttempt{}
	for rows.Next() {
		var i OtpAttempt
		if err := rows.Scan(
			&i.AttemptID,
			&i.Phone,
			&i.AttemptedAt,
			&i.Success,
			&i.ClientIp,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOTPRateLimit = `-- name: GetOTPRateLimit :one

SELECT phone, failed_attempts, locked_until, first_attempt_at, last_attempt_at, created_at, updated_at FROM otp_rate_limits 
WHERE phone = ?
`

// OTP Rate Limits Queries
func (q *Queries) GetOTPRateLimit(ctx context.Context, phone string) (OtpRateLimit, error) {
	row := q.db.QueryRowContext(ctx, getOTPRateLimit, phone)
	var i OtpRateLimit
	err := row.Scan(
		&i.Phone,
		&i.FailedAttempts,
		&i.LockedUntil,
		&i.FirstAttemptAt,
		&i.LastAttemptAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetOTPRateLimit = `-- name: ResetOTPRateLimit :exec
UPDATE otp_rate_limits 
SET failed_attempts = 0, 
    locked_until = NULL, 
    updated_at = CURRENT_TIMESTAMP
WHERE phone = ?
`

func (q *Queries) ResetOTPRateLimit(ctx context.Context, phone string) error {
	_, err := q.db.ExecContext(ctx, resetOTPRateLimit, phone)
	return err
}

const updateOTPRateLimit = `-- name: UpdateOTPRateLimit :exec
UPDATE otp_rate_limits 
SET failed_attempts = ?, 
    locked_until = ?, 
    last_attempt_at = ?, 
    updated_at = CURRENT_TIMESTAMP
WHERE phone = ?
`

type UpdateOTPRateLimitParams struct {
	FailedAttempts int64        `json:"failed_attempts"`
	LockedUntil    sql.NullTime `json:"locked_until"`
	LastAttemptAt  time.Time    `json:"last_attempt_at"`
	Phone          string       `json:"phone"`
}

func (q *Queries) UpdateOTPRateLimit(ctx context.Context, arg UpdateOTPRateLimitParams) error {
	_, err := q.db.ExecContext(ctx, updateOTPRateLimit,
		arg.FailedAttempts,
		arg.LockedUntil,
		arg.LastAttemptAt,
		arg.Phone,
	)
	return err
}
