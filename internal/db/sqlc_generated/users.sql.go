// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    phone,
    name,
    role
) VALUES (
    ?,
    ?,
    COALESCE(?3, 'guest') -- Use guest if role is not provided
)
RETURNING user_id, phone, name, created_at, role
`

type CreateUserParams struct {
	Phone string         `json:"phone"`
	Name  sql.NullString `json:"name"`
	Role  interface{}    `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Phone, arg.Name, arg.Role)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Phone,
		&i.Name,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, phone, name, created_at, role FROM users
WHERE user_id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Phone,
		&i.Name,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT user_id, phone, name, created_at, role FROM users
WHERE phone = ?
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Phone,
		&i.Name,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, phone, name, created_at, role
FROM users
WHERE
    -- sqlc.narg ensures that if search_query is NULL, this condition is true
    (?1 IS NULL 
    -- if search_query is not NULL, then we apply the LIKE conditions
    OR LOWER(name) LIKE LOWER(?1) 
    OR LOWER(phone) LIKE LOWER(?1))
ORDER BY name ASC
`

func (q *Queries) ListUsers(ctx context.Context, searchQuery interface{}) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, searchQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Phone,
			&i.Name,
			&i.CreatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    phone = COALESCE(?1, phone),
    name = COALESCE(?2, name),
    role = COALESCE(?3, role)
WHERE
    user_id = ?4
RETURNING user_id, phone, name, created_at, role
`

type UpdateUserParams struct {
	Phone  sql.NullString `json:"phone"`
	Name   sql.NullString `json:"name"`
	Role   sql.NullString `json:"role"`
	UserID int64          `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Phone,
		arg.Name,
		arg.Role,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Phone,
		&i.Name,
		&i.CreatedAt,
		&i.Role,
	)
	return i, err
}
