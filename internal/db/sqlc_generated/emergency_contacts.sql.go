// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: emergency_contacts.sql

package db

import (
	"context"
	"database/sql"
)

const createEmergencyContact = `-- name: CreateEmergencyContact :one
INSERT INTO emergency_contacts (name, number, description, is_default, display_order)
VALUES (?, ?, ?, ?, ?)
RETURNING contact_id, name, number, description, is_default, is_active, display_order, created_at, updated_at
`

type CreateEmergencyContactParams struct {
	Name         string         `json:"name"`
	Number       string         `json:"number"`
	Description  sql.NullString `json:"description"`
	IsDefault    bool           `json:"is_default"`
	DisplayOrder int64          `json:"display_order"`
}

func (q *Queries) CreateEmergencyContact(ctx context.Context, arg CreateEmergencyContactParams) (EmergencyContact, error) {
	row := q.db.QueryRowContext(ctx, createEmergencyContact,
		arg.Name,
		arg.Number,
		arg.Description,
		arg.IsDefault,
		arg.DisplayOrder,
	)
	var i EmergencyContact
	err := row.Scan(
		&i.ContactID,
		&i.Name,
		&i.Number,
		&i.Description,
		&i.IsDefault,
		&i.IsActive,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEmergencyContact = `-- name: DeleteEmergencyContact :exec
UPDATE emergency_contacts 
SET is_active = 0, updated_at = CURRENT_TIMESTAMP
WHERE contact_id = ?
`

func (q *Queries) DeleteEmergencyContact(ctx context.Context, contactID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmergencyContact, contactID)
	return err
}

const getDefaultEmergencyContact = `-- name: GetDefaultEmergencyContact :one
SELECT contact_id, name, number, description, is_default, is_active, display_order, created_at, updated_at
FROM emergency_contacts 
WHERE is_default = 1 AND is_active = 1
LIMIT 1
`

func (q *Queries) GetDefaultEmergencyContact(ctx context.Context) (EmergencyContact, error) {
	row := q.db.QueryRowContext(ctx, getDefaultEmergencyContact)
	var i EmergencyContact
	err := row.Scan(
		&i.ContactID,
		&i.Name,
		&i.Number,
		&i.Description,
		&i.IsDefault,
		&i.IsActive,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmergencyContactByID = `-- name: GetEmergencyContactByID :one
SELECT contact_id, name, number, description, is_default, is_active, display_order, created_at, updated_at
FROM emergency_contacts 
WHERE contact_id = ? AND is_active = 1
`

func (q *Queries) GetEmergencyContactByID(ctx context.Context, contactID int64) (EmergencyContact, error) {
	row := q.db.QueryRowContext(ctx, getEmergencyContactByID, contactID)
	var i EmergencyContact
	err := row.Scan(
		&i.ContactID,
		&i.Name,
		&i.Number,
		&i.Description,
		&i.IsDefault,
		&i.IsActive,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmergencyContacts = `-- name: GetEmergencyContacts :many
SELECT contact_id, name, number, description, is_default, is_active, display_order, created_at, updated_at
FROM emergency_contacts 
WHERE is_active = 1
ORDER BY display_order ASC, name ASC
`

func (q *Queries) GetEmergencyContacts(ctx context.Context) ([]EmergencyContact, error) {
	rows, err := q.db.QueryContext(ctx, getEmergencyContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmergencyContact{}
	for rows.Next() {
		var i EmergencyContact
		if err := rows.Scan(
			&i.ContactID,
			&i.Name,
			&i.Number,
			&i.Description,
			&i.IsDefault,
			&i.IsActive,
			&i.DisplayOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDefaultEmergencyContact = `-- name: SetDefaultEmergencyContact :exec
UPDATE emergency_contacts 
SET is_default = CASE WHEN contact_id = ? THEN 1 ELSE 0 END,
    updated_at = CURRENT_TIMESTAMP
WHERE is_active = 1
`

func (q *Queries) SetDefaultEmergencyContact(ctx context.Context, contactID int64) error {
	_, err := q.db.ExecContext(ctx, setDefaultEmergencyContact, contactID)
	return err
}

const updateEmergencyContact = `-- name: UpdateEmergencyContact :one
UPDATE emergency_contacts 
SET name = ?, number = ?, description = ?, is_default = ?, display_order = ?, updated_at = CURRENT_TIMESTAMP
WHERE contact_id = ? AND is_active = 1
RETURNING contact_id, name, number, description, is_default, is_active, display_order, created_at, updated_at
`

type UpdateEmergencyContactParams struct {
	Name         string         `json:"name"`
	Number       string         `json:"number"`
	Description  sql.NullString `json:"description"`
	IsDefault    bool           `json:"is_default"`
	DisplayOrder int64          `json:"display_order"`
	ContactID    int64          `json:"contact_id"`
}

func (q *Queries) UpdateEmergencyContact(ctx context.Context, arg UpdateEmergencyContactParams) (EmergencyContact, error) {
	row := q.db.QueryRowContext(ctx, updateEmergencyContact,
		arg.Name,
		arg.Number,
		arg.Description,
		arg.IsDefault,
		arg.DisplayOrder,
		arg.ContactID,
	)
	var i EmergencyContact
	err := row.Scan(
		&i.ContactID,
		&i.Name,
		&i.Number,
		&i.Description,
		&i.IsDefault,
		&i.IsActive,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
