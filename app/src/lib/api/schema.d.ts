/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user or request OTP for existing user
         * @description Registers a new user with phone number or starts login flow for existing user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User registration details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["api.RegisterRequest"];
                };
            };
            responses: {
                /** @description OTP sent successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.RegisterResponse"];
                    };
                };
                /** @description Invalid phone number or request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify OTP and get authentication token
         * @description Verifies the one-time password (OTP) and returns a JWT token on success
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Verification details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["api.VerifyRequest"];
                };
            };
            responses: {
                /** @description Verified successfully, returns JWT token */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.VerifyResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Invalid OTP or verification failed */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new booking
         * @description Books a shift slot for a user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Booking details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["api.CreateBookingRequest"];
                };
            };
            responses: {
                /** @description Booking created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.BookingResponse"];
                    };
                };
                /** @description Invalid request format or data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Unauthorized - authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Schedule not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Slot already booked (conflict) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bookings/{id}/attendance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Mark attendance for a booking
         * @description Updates a booking to record whether the volunteer attended
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Booking ID */
                    id: number;
                };
                cookie?: never;
            };
            /** @description Attendance status */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["api.MarkAttendanceRequest"];
                };
            };
            responses: {
                /** @description Attendance marked successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.BookingResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Unauthorized - authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Forbidden - not authorized to mark this booking */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Booking not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/bookings/{id}/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a report for a booking
         * @description Submits an incident report for a specific booking
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Booking ID */
                    id: number;
                };
                cookie?: never;
            };
            /** @description Report details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["api.CreateReportRequest"];
                };
            };
            responses: {
                /** @description Report created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ReportResponse"];
                    };
                };
                /** @description Invalid request format or severity out of range */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Unauthorized - authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Forbidden - not authorized to report on this booking */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Booking not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all schedules
         * @description Returns a list of all defined schedules
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of schedules */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ScheduleResponse"][];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shifts/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available shift slots
         * @description Returns a list of available shift slots based on schedule definitions
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date for shift window (RFC3339 format) */
                    from?: string;
                    /** @description End date for shift window (RFC3339 format) */
                    to?: string;
                    /** @description Maximum number of shifts to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of available shift slots */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["service.AvailableShiftSlot"][];
                    };
                };
                /** @description Invalid query parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "api.BookingResponse": {
            attended?: boolean;
            booking_id?: number;
            buddy_name?: string;
            buddy_user_id?: number;
            created_at?: string;
            schedule_id?: number;
            shift_end?: string;
            shift_start?: string;
            user_id?: number;
        };
        "api.CreateBookingRequest": {
            buddy_name?: string;
            buddy_phone?: string;
            schedule_id?: number;
            /** @description Expected in RFC3339 format e.g. "2025-05-10T18:00:00Z" */
            start_time?: string;
        };
        "api.CreateReportRequest": {
            message?: string;
            /** @description 0, 1, or 2 */
            severity?: number;
        };
        "api.ErrorResponse": {
            error?: string;
        };
        "api.MarkAttendanceRequest": {
            attended?: boolean;
        };
        "api.RegisterRequest": {
            name?: string;
            phone?: string;
        };
        "api.RegisterResponse": {
            message?: string;
        };
        "api.ReportResponse": {
            booking_id?: number;
            created_at?: string;
            message?: string;
            report_id?: number;
            severity?: number;
        };
        "api.ScheduleResponse": {
            cron_expr?: string;
            duration_minutes?: number;
            end_date?: string;
            name?: string;
            schedule_id?: number;
            start_date?: string;
            timezone?: string;
        };
        "api.VerifyRequest": {
            code?: string;
            phone?: string;
        };
        "api.VerifyResponse": {
            token?: string;
        };
        "service.AvailableShiftSlot": {
            end_time?: string;
            /** @description Should always be false when returned by GetUpcomingAvailableSlots */
            is_booked?: boolean;
            schedule_id?: number;
            schedule_name?: string;
            start_time?: string;
            timezone?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
